version: 2.0.0

arch_conf:
  Name: PowerPC
  Word Size: 32
  Description: PowerPC
  Data Format: big_endian
  Memory Alignment: true
  Main Function: main
  Passing Convention: true
  Sensitive Register Name: true
  CommentPrefix: "#"

extensions:
  I:
    description: "RV32I Base Instruction Set"
    type: base
  M:
    description: "RV32M Integer Multiply/Divide Extension"
    type: extension
  F:
    description: "RV32F Single-Precision Floating-Point Extension"
    type: extension
    implies:
      - Zicsr
  D:
    description: "RV32D Double-Precision Floating-Point Extension"
    type: extension
    implies:
      - F
  Zifencei:
    description: "RV32/RV64 Zifencei Standard Extension"
    type: extension
  Zicsr:
    description: "RV32/RV64 Zicsr Standard Extension"
    type: extension

components:
  - name: Control registers
    type: ctrl_registers
    double_precision: false
    elements:
      - name:
          - PC
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - program_counter
  - name: Integer registers
    type: int_registers
    double_precision: false
    elements:
      - name:
          - x0
          - zero
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - ignore_write
      - name:
          - x1
          - ra
        nbits: "32"
        value: 4294967295
        default_value: 4294967295
        properties:
          - read
          - write
      - name:
          - x2
          - sp
        nbits: "32"
        value: 268435452
        default_value: 268435452
        properties:
          - read
          - write
          - stack_pointer
      - name:
          - x3
          - gp
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - global_pointer
      - name:
          - x4
          - tp
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - x5
          - t0
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - x6
          - t1
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - x7
          - t2
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - x8
          - fp
          - s0
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - frame_pointer
          - saved
      - name:
          - x9
          - s1
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - x10
          - a0
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - x11
          - a1
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - x12
          - a2
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - x13
          - a3
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - x14
          - a4
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - x15
          - a5
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - x16
          - a6
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - x17
          - a7
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - x18
          - s2
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - x19
          - s3
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - x20
          - s4
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - x21
          - s5
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - x22
          - s6
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - x23
          - s7
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - x24
          - s8
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - x25
          - s9
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - x26
          - s10
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - x27
          - s11
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - x28
          - t3
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - x29
          - t4
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - x30
          - t5
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - x31
          - t6
        nbits: "32"
        value: 0
        default_value: 0
        properties:
          - read
          - write
  - name: Floating point registers
    type: fp_registers
    double_precision: true
    double_precision_type: extended
    elements:
      - name:
          - f0
          - ft0
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - f1
          - ft1
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - f2
          - ft2
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - f3
          - ft3
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - f4
          - ft4
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - f5
          - ft5
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - f6
          - ft6
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - f7
          - ft7
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - f8
          - fs0
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - f9
          - fs1
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - f10
          - fa0
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - f11
          - fa1
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - f12
          - fa2
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - f13
          - fa3
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - f14
          - fa4
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - f15
          - fa5
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - f16
          - fa6
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - f17
          - fa7
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - f18
          - fs2
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - f19
          - fs3
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - f20
          - fs4
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - f21
          - fs5
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - f22
          - fs6
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - f23
          - fs7
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - f24
          - fs8
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - f25
          - fs9
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - f26
          - fs10
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - f27
          - fs11
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - saved
      - name:
          - f28
          - ft8
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - f29
          - ft9
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - f30
          - ft10
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write
      - name:
          - f31
          - ft11
        nbits: "64"
        value: 0
        default_value: 0
        properties:
          - read
          - write

directives:
  - name: .data
    action: data_segment
    size: null
  - name: .text
    action: code_segment
    size: null
  - name: .bss
    action: global_symbol
    size: null
  - name: .zero
    action: space
    size: 1
  - name: .space
    action: space
    size: 1
  - name: .align
    action: align
    size: null
  - name: .balign
    action: balign
    size: null
  - name: .globl
    action: global_symbol
    size: null
  - name: .string
    action: ascii_null_end
    size: null
  - name: .asciz
    action: ascii_null_end
    size: null
  - name: .ascii
    action: ascii_not_null_end
    size: null
  - name: .byte
    action: byte
    size: 1
  - name: .half
    action: half_word
    size: 2
  - name: .word
    action: word
    size: 4
  - name: .dword
    action: double_word
    size: 8
  - name: .float
    action: float
    size: 4
  - name: .double
    action: double
    size: 8

memory_layout:
  - name: text start
    value: "0x00000000"
  - name: text end
    value: "0x001FFFFF"
  - name: data start
    value: "0x00200000"
  - name: data end
    value: "0x05BBFCBF"
  - name: stack start
    value: "0x0FFFFFFC"
  - name: stack end
    value: "0x0FFFFFFF"

templates:
  - name: B
    nwords: 1
    clk_cycles: 1
    fields:
      - name: opcode
        type: co
        startbit: 6
        stopbit: 0
        order: 0
      - name: rs1
        type: INT-Reg
        startbit: 19
        stopbit: 15
        order: 1
      - name: rs2
        type: INT-Reg
        startbit: 24
        stopbit: 20
        order: 2
      - name: imm
        type: offset_bytes
        startbit:
          - 31
          - 7
          - 30
          - 11
        stopbit:
          - 31
          - 7
          - 25
          - 8
        padding: 1
        order: 3
      - name: funct3
        type: cop
        startbit: 14
        stopbit: 12

  - name: I
    nwords: 1
    clk_cycles: 1
    fields:
      - name: opcode
        type: co
        startbit: 6
        stopbit: 0
        order: 0
      - name: rd
        type: INT-Reg
        startbit: 11
        stopbit: 7
        order: 1
      - name: imm
        type: inm-signed
        startbit: 31
        stopbit: 20
        order: 3
      - name: rs1
        type: INT-Reg
        startbit: 19
        stopbit: 15
        order: 2
      - name: funct3
        type: cop
        startbit: 14
        stopbit: 12

  - name: I-Offset
    # Not an "official" instruction, but used for the offset in the I-type instructions
    nwords: 1
    clk_cycles: 1
    fields:
      - name: opcode
        type: co
        startbit: 6
        stopbit: 0
        order: 0
      - name: rd
        type: INT-Reg
        startbit: 11
        stopbit: 7
        order: 1
      - name: imm
        type: inm-signed
        startbit: 31
        stopbit: 20
        order: 2
      - name: rs1
        type: INT-Reg
        startbit: 19
        stopbit: 15
        order: 3
        prefix: (
        suffix: )
      - name: funct3
        type: cop
        startbit: 14
        stopbit: 12

  - name: I-Shift
    nwords: 1
    clk_cycles: 1
    fields:
      - name: opcode
        type: co
        startbit: 6
        stopbit: 0
        order: 0
      - name: rd
        type: INT-Reg
        startbit: 11
        stopbit: 7
        order: 1
      - name: rs1
        type: INT-Reg
        startbit: 19
        stopbit: 15
        order: 2
      - name: shamt
        type: inm-unsigned
        startbit: 24
        stopbit: 20
        order: 3
      - name: funct7
        type: cop
        startbit: 31
        stopbit: 25
      - name: funct3
        type: cop
        startbit: 14
        stopbit: 12

  - name: J
    nwords: 1
    clk_cycles: 1
    fields:
      - name: opcode
        type: co
        startbit: 6
        stopbit: 0
        order: 0
      - name: rd
        type: INT-Reg
        startbit: 11
        stopbit: 7
        order: 1
      - name: imm
        type: offset_bytes
        startbit:
          - 31
          - 19
          - 20
          - 30
        stopbit:
          - 31
          - 12
          - 20
          - 21
        padding: 1
        order: 2

  - name: R
    nwords: 1
    clk_cycles: 1
    fields:
      - name: opcode
        type: co
        startbit: 6
        stopbit: 0
        order: 0
      - name: rd
        type: INT-Reg
        startbit: 11
        stopbit: 7
        order: 1
      - name: rs1
        type: INT-Reg
        startbit: 19
        stopbit: 15
        order: 2
      - name: rs2
        type: INT-Reg
        startbit: 24
        stopbit: 20
        order: 3
      - name: funct7
        type: cop
        startbit: 31
        stopbit: 25
      - name: funct3
        type: cop
        startbit: 14
        stopbit: 12

  - name: R-Floating # Used in rv32f / rv64f
    nwords: 1
    clk_cycles: 1
    fields:
      - name: opcode
        type: co
        startbit: 6
        stopbit: 0
        order: 0
      - name: rd
        type: SFP-Reg
        startbit: 11
        stopbit: 7
        order: 1
      - name: rs1
        type: SFP-Reg
        startbit: 19
        stopbit: 15
        order: 2
      - name: rs2
        type: SFP-Reg
        startbit: 24
        stopbit: 20
        order: 3
      - name: funct7
        type: cop
        startbit: 31
        stopbit: 25
      - name: funct3
        type: cop
        startbit: 14
        stopbit: 12

  - name: R-Double # Used in rv64d
    nwords: 1
    clk_cycles: 1
    fields:
      - name: opcode
        type: co
        startbit: 6
        stopbit: 0
        order: 0
      - name: rd
        type: DFP-Reg
        startbit: 11
        stopbit: 7
        order: 1
      - name: rs1
        type: DFP-Reg
        startbit: 19
        stopbit: 15
        order: 2
      - name: rs2
        type: DFP-Reg
        startbit: 24
        stopbit: 20
        order: 3
      - name: funct7
        type: cop
        startbit: 31
        stopbit: 25
      - name: funct3
        type: cop
        startbit: 14
        stopbit: 12

  - name: R-IntToFloat # fcvt.s.w,...
    nwords: 1
    clk_cycles: 1
    fields:
      - name: opcode
        type: co
        startbit: 6
        stopbit: 0
        order: 0
      - name: rd
        type: SFP-Reg
        startbit: 11
        stopbit: 7
        order: 1
      - name: rs1
        type: INT-Reg
        startbit: 19
        stopbit: 15
        order: 2
      - name: funct5
        type: cop
        startbit: 24
        stopbit: 20
      - name: funct7
        type: cop
        startbit: 31
        stopbit: 25
      - name: funct3
        type: cop
        startbit: 14
        stopbit: 12

  - name: R-FloatToInt # fcvt.w.s,...
    nwords: 1
    clk_cycles: 1
    fields:
      - name: opcode
        type: co
        startbit: 6
        stopbit: 0
        order: 0
      - name: rd
        type: INT-Reg
        startbit: 11
        stopbit: 7
        order: 1
      - name: rs1
        type: SFP-Reg
        startbit: 19
        stopbit: 15
        order: 2
      - name: funct5
        type: cop
        startbit: 24
        stopbit: 20
      - name: funct7
        type: cop
        startbit: 31
        stopbit: 25
      - name: funct3
        type: cop
        startbit: 14
        stopbit: 12

  - name: R-Conversion # Generic template
    nwords: 1
    clk_cycles: 1
    fields:
      - name: opcode
        type: co
        startbit: 6
        stopbit: 0
        order: 0
      - name: rd
        type: Not-Set
        startbit: 11
        stopbit: 7
        order: 1
      - name: rs1
        type: Not-Set
        startbit: 19
        stopbit: 15
        order: 2
      - name: funct5
        type: cop
        startbit: 24
        stopbit: 20
      - name: funct7
        type: cop
        startbit: 31
        stopbit: 25
      - name: funct3
        type: cop
        startbit: 14
        stopbit: 12

  - name: R4
    nwords: 1
    clk_cycles: 1
    fields:
      - name: opcode
        type: co
        startbit: 6
        stopbit: 0
        order: 0
      - name: rd
        type: SFP-Reg
        startbit: 11
        stopbit: 7
        order: 1
      - name: rs1
        type: SFP-Reg
        startbit: 19
        stopbit: 15
        order: 2
      - name: rs2
        type: SFP-Reg
        startbit: 24
        stopbit: 20
        order: 3
      - name: rs3
        type: SFP-Reg
        startbit: 31
        stopbit: 27
        order: 4
      - name: funct3
        type: cop
        startbit: 14
        stopbit: 12
      - name: funct2
        type: cop
        startbit: 26
        stopbit: 25

  - name: R4-Double
    nwords: 1
    clk_cycles: 1
    fields:
      - name: opcode
        type: co
        startbit: 6
        stopbit: 0
        order: 0
      - name: rd
        type: DFP-Reg
        startbit: 11
        stopbit: 7
        order: 1
      - name: rs1
        type: DFP-Reg
        startbit: 19
        stopbit: 15
        order: 2
      - name: rs2
        type: DFP-Reg
        startbit: 24
        stopbit: 20
        order: 3
      - name: rs3
        type: DFP-Reg
        startbit: 31
        stopbit: 27
        order: 4
      - name: funct3
        type: cop
        startbit: 14
        stopbit: 12
      - name: funct2
        type: cop
        startbit: 26
        stopbit: 25

  - name: S
    nwords: 1
    clk_cycles: 1
    fields:
      - name: opcode
        type: co
        startbit: 6
        stopbit: 0
        order: 0
      - name: rs2
        type: INT-Reg
        startbit: 24
        stopbit: 20
        order: 1
      - name: imm
        type: inm-signed
        startbit:
          - 31
          - 11
        stopbit:
          - 25
          - 7
        order: 2
      - name: rs1
        type: INT-Reg
        startbit: 19
        stopbit: 15
        prefix: (
        suffix: )
        order: 3
      - name: funct3
        type: cop
        startbit: 14
        stopbit: 12

  - name: U
    nwords: 1
    clk_cycles: 1
    fields:
      - name: opcode
        type: co
        startbit: 6
        stopbit: 0
        order: 0
      - name: rd
        type: INT-Reg
        startbit: 11
        stopbit: 7
        order: 1
      - name: imm
        type: inm-unsigned
        startbit: 31
        stopbit: 12
        order: 2

  - name: Custom
    nwords: 1
    clk_cycles: 1
    fields:
      - name: opcode
        type: co
        startbit: 6
        stopbit: 0
        order: 0

instructions:
  #   ____ __     __ _____ ____   ___
  #  |  _ \\ \   / /|___ /|___ \ |_ _|
  #  | |_) |\ \ / /   |_ \  __) | | |
  #  |  _ <  \ V /   ___) |/ __/  | |
  #  |_| \_\  \_/   |____/|_____||___|
  #   RV32I 32I Base Instruction Set
  I:
    # B-type instructions
    #     31     30-25    24-20   19-15   14-12   11-8    7      6-0
    # ┌────┬──────────┬───────┬───────┬───────┬──────┬────┬─────────┐
    # │ imm│  imm     │  rs2  │  rs1  │ func3 │ imm  │imm │ opcode  │
    # │[12]│  [10:5]  │       │       │       │[4:1] │[11]│         │
    # └──┬─┴────┬─────┴───┬───┴───┬───┴───┬───┴──┬───┴────┴────┬────┘
    #    │      │         │       │       │      │             │
    #    1      6         5       5       3      4       1     7    bits = 32 bits = word size
    - name: beq
      type: B
      fields:
        - field: opcode
          value: "1100011"
        - field: funct3
          value: "000"
      definition: "if (rs1 === rs2)\n PC = PC + imm;"

    - name: bge
      type: B
      fields:
        - field: opcode
          value: "1100011"
        - field: funct3
          value: "101"
      definition: "if (capi_uint2int(rs1) >= capi_uint2int(rs2))\n PC = PC + imm;"

    - name: bgeu
      type: B
      fields:
        - field: opcode
          value: "1100011"
        - field: funct3
          value: "111"
      definition: "if (capi_int2uint(rs1) > capi_int2uint(rs2))\n PC = PC + imm;"

    - name: blt
      type: B
      fields:
        - field: opcode
          value: "1100011"
        - field: funct3
          value: "100"
      definition: "if (capi_uint2int(rs1) < capi_uint2int(rs2))\n PC = PC + imm;"

    - name: bltu
      type: B
      fields:
        - field: opcode
          value: "1100011"
        - field: funct3
          value: "110"
      definition: "if (capi_int2uint(rs1) < capi_int2uint(rs2))\n PC = PC + imm;"

    - name: bne
      type: B
      fields:
        - field: opcode
          value: "1100011"
        - field: funct3
          value: "001"
      definition: "if (rs1 !== rs2)\n PC = PC + imm;"

    # I-type instructions
    #     31-20    19-15   14-12   11-7    6-0
    # ┌──────────┬───────┬───────┬───────┬─────────┐
    # │   imm    │  rs1  │ func3 │  rd   │ opcode  │
    # │  [11:0]  │       │       │       │         │
    # └────┬─────┴───┬───┴───┬───┴───┬───┴────┬────┘
    #      │         │       │       │        │
    #      12        5       3       5        7    bits = 32 bits = word size
    - name: addi
      type: I
      fields:
        - field: opcode
          value: "0010011"
        - field: funct3
          value: "000"
      definition: "rd = rs1 + imm;"

    - name: andi
      type: I
      fields:
        - field: opcode
          value: "0010011"
        - field: funct3
          value: "111"
      definition: "rd = rs1 & capi_int2uint(imm);"

    - name: jalr
      type: I-Offset
      fields:
        - field: opcode
          value: "1100111"
        - field: funct3
          value: "000"
      definition: "rd = PC + 4n;\n PC = (rs1+imm)&~1n;\n capi_callconv_end(); capi_drawstack_end(PC);"

    - name: lb
      type: I-Offset
      fields:
        - field: opcode
          value: "0000011"
        - field: funct3
          value: "000"
      definition: "rd = capi_mem_read(imm+rs1, 'b', rd_name);"

    - name: lbu
      type: I-Offset
      fields:
        - field: opcode
          value: "0000011"
        - field: funct3
          value: "100"
      definition: "var addr = capi_int2uint(rs1)+imm;\n rd = capi_mem_read(addr, 'bu', rd_name);\n rd = capi_int2uint(rd);"

    - name: lh
      type: I-Offset
      fields:
        - field: opcode
          value: "0000011"
        - field: funct3
          value: "001"
      definition: "rd = capi_mem_read(imm+rs1, 'h', rd_name);"

    - name: lhu
      type: I-Offset
      fields:
        - field: opcode
          value: "0000011"
        - field: funct3
          value: "101"
      definition: "var addr = capi_int2uint(rs1)+imm;\n rd = capi_mem_read(addr, 'hu', rd_name);\n rd = capi_int2uint(rd);"

    - name: lw
      type: I-Offset
      fields:
        - field: opcode
          value: "0000011"
        - field: funct3
          value: "010"
      definition: "var addr = capi_int2uint(rs1)+imm;\n rd = capi_mem_read(addr, 'w', rd_name);"

    - name: ori
      type: I
      fields:
        - field: opcode
          value: "0010011"
        - field: funct3
          value: "110"
      definition: "rd = rs1 | imm;"

    - name: slli
      type: I-Shift
      fields:
        - field: opcode
          value: "0010011"
        - field: funct3
          value: "001"
        - field: funct7
          value: "0000000"
      definition: "if (shamt > 0) {rd = capi_int2uint(rs1 << shamt);}"

    - name: slti
      type: I
      fields:
        - field: opcode
          value: "0010011"
        - field: funct3
          value: "010"
      definition: "rd = (capi_uint2int(rs1) < capi_uint2int(imm)) ? 1 : 0;"

    - name: sltiu
      type: I
      fields:
        - field: opcode
          value: "0010011"
        - field: funct3
          value: "011"
      definition: "rd = (capi_int2uint(rs1) < capi_int2uint(imm)) ? 1 : 0;"

    - name: srai
      type: I-Shift
      fields:
        - field: opcode
          value: "0010011"
        - field: funct3
          value: "101"
        - field: funct7
          value: "0100000"
      definition: "if (shamt > 0) {rd = capi_int2uint(rs1 >> shamt);}"

    - name: srli
      type: I-Shift
      fields:
        - field: opcode
          value: "0010011"
        - field: funct3
          value: "101"
        - field: funct7
          value: "0000000"
      definition: "if (shamt > 0) {rd = capi_int2uint(rs1 >> shamt);}"

    - name: xori
      type: I
      fields:
        - field: opcode
          value: "0010011"
        - field: funct3
          value: "100"
      definition: "rd = rs1 ^ imm;"

    # J-type instructions
    #     31    30-21     20     19-12   11-7    6-0
    # ┌────┬──────────┬─────┬─────────┬───────┬─────────┐
    # │imm │   imm    │ imm │   imm   │  rd   │ opcode  │
    # │[20]│  [10:1]  │[11] │ [19:12] │       │         │
    # └──┬─┴────┬─────┴──┬──┴────┬────┴───┬───┴────┬────┘
    #    │      │        │       │        │        │
    #    1      10       1       8        5        7    bits = 32 bits = word size
    - name: jal
      type: J
      fields:
        - field: opcode
          value: "1101111"
      definition: "rd = PC + 4n;\n PC = PC + imm;\n capi_callconv_begin(PC); capi_drawstack_begin(PC);"

    # R-type instructions
    #     31-25    24-20   19-15   14-12   11-7    6-0
    # ┌──────────┬───────┬───────┬───────┬───────┬─────────┐
    # │  funct7  │  rs2  │  rs1  │ funct3│  rd   │ opcode  │
    # │          │       │       │       │       │         │
    # └────┬─────┴───┬───┴───┬───┴───┬───┴───┬───┴────┬────┘
    #      │         │       │       │       │        │
    #      7         5       5       3       5        7    bits = 32 bits = word size
    - name: add
      type: R
      fields:
        - field: opcode
          value: "0110011"
        - field: funct7
          value: "0000000"
        - field: funct3
          value: "000"
      definition: "rd = rs2 + rs1;"

    - name: and
      type: R
      fields:
        - field: opcode
          value: "0110011"
        - field: funct7
          value: "0000000"
        - field: funct3
          value: "111"
      definition: "rd = rs1 & rs2;"

    - name: or
      type: R
      fields:
        - field: opcode
          value: "0110011"
        - field: funct7
          value: "0000000"
        - field: funct3
          value: "110"
      definition: "rd = rs1 | rs2;"

    - name: sll
      type: R
      fields:
        - field: opcode
          value: "0110011"
        - field: funct7
          value: "0000000"
        - field: funct3
          value: "001"
      definition: "const shiftAmount = rs2 & 0x1Fn; rd = (rs1 << shiftAmount) & 0xFFFFFFFFn;"

    - name: slt
      type: R
      fields:
        - field: opcode
          value: "0110011"
        - field: funct7
          value: "0000000"
        - field: funct3
          value: "010"
      definition: "rd = (capi_uint2int(rs1) < capi_uint2int(rs2)) ? 1 : 0;"

    - name: sltu
      type: R
      fields:
        - field: opcode
          value: "0110011"
        - field: funct7
          value: "0000000"
        - field: funct3
          value: "011"
      definition: "rd = ((rs1 & 0xFFFFFFFFn) < (rs2 & 0xFFFFFFFFn)) ? 1n : 0n;"

    - name: sra
      type: R
      fields:
        - field: opcode
          value: "0110011"
        - field: funct7
          value: "0100000"
        - field: funct3
          value: "101"
      definition: "const temp = BigInt.asIntN(32, BigInt(rs1)) >> BigInt(rs2); rd = capi_int2uint(temp)"

    - name: srl
      type: R
      fields:
        - field: opcode
          value: "0110011"
        - field: funct7
          value: "0000000"
        - field: funct3
          value: "101"
      definition: "const shiftAmount = rs2 & 0x1Fn; rd = (rs1 >> shiftAmount) & 0xFFFFFFFFn;"

    - name: sub
      type: R
      fields:
        - field: opcode
          value: "0110011"
        - field: funct7
          value: "0100000"
        - field: funct3
          value: "000"
      definition: "rd = rs1 - rs2;"

    - name: xor
      type: R
      fields:
        - field: opcode
          value: "0110011"
        - field: funct7
          value: "0000000"
        - field: funct3
          value: "100"
      definition: "rd = (rs1 ^ rs2);"

    # S-type instructions
    #     31-25    24-20   19-15   14-12   11-7    6-0
    # ┌──────────┬───────┬───────┬───────┬───────┬─────────┐
    # │   imm    │  rs2  │  rs1  │ func3 │  imm  │ opcode  │
    # │  [11:5]  │       │       │       │ [4:0] │         │
    # └────┬─────┴───┬───┴───┬───┴───┬───┴───┬───┴────┬────┘
    #      │         │       │       │       │        │
    #      7         5       5       3       5        7    bits = 32 bits = word size
    - name: sb
      type: S
      fields:
        - field: opcode
          value: "0100011"
        - field: funct3
          value: "000"
      definition: "capi_mem_write(rs1+imm, rs2, 'b', rs2_name);"

    - name: sh
      type: S
      fields:
        - field: opcode
          value: "0100011"
        - field: funct3
          value: "001"
      definition: "capi_mem_write(imm+rs1, rs2, 'h', rs2_name);"

    # The check for the
    - name: sw
      type: S
      fields:
        - field: opcode
          value: "0100011"
        - field: funct3
          value: "010"
      definition: "capi_mem_write(imm+rs1, rs2, 'w', rs2_name); if (rs1_name === 'sp') { const formattedAddr = '0x'+(imm+rs1).toString(16).padStart(8, '0').toUpperCase(); capi_drawstack_add_hint(formattedAddr, rs2_name) }"

    # U-type instructions
    #           31-12                   11-7    6-0
    # ┌──────────────────────────────┬───────┬─────────┐
    # │            imm               │  rd   │ opcode  │
    # │           [31:12]            │       │         │
    # └────────────────┬─────────────┴───┬───┴────┬────┘
    #                  │                 │        │
    #                  20                5        7    bits = 32 bits = word size
    - name: auipc
      type: U
      fields:
        - field: opcode
          value: "0010111"
        - field: imm
          type: offset_bytes
      definition: "rd = PC + (imm << 12n);"

    - name: lui
      type: U
      fields:
        - field: opcode
          value: "0110111"
        - field: imm
          type: inm-unsigned
      definition: "rd = imm << 12n;"

      # Special instructions
    - name: ecall
      type: Custom
      fields:
        - field: opcode
          value: "1110011"
        - field: zeros
          type: cop
          startbit: 31
          stopbit: 7
          value: "0000000000000000000000000"
      definition: "switch(a7){\ncase 1n:\ncapi_print_int('a0');\nbreak;\ncase 2n:\ncapi_print_float('fa0');\nbreak;\ncase 3n:\ncapi_print_double('fa0');\nbreak;\ncase 4n:\ncapi_print_string('a0');\nbreak;\ncase 5n:\ncapi_read_int('a0');\nbreak;\ncase 6n:\ncapi_read_float('fa0');\nbreak;\ncase 7n:\ncapi_read_double('fa0');\nbreak;\ncase 8n:\ncapi_read_string('a0', 'a1');\nbreak;\ncase 9n:\ncapi_sbrk('a0', 'a0');\nbreak;\ncase 10n:\ncapi_exit();\nbreak;\ncase 11n:\ncapi_print_char('a0');\nbreak;\ncase 12n:\ncapi_read_char('a0');\nbreak;\n}"

    - name: ebreak
      type: Custom
      fields:
        - field: opcode
          value: "1110011"
        - field: funct12
          type: cop
          startbit: 31
          stopbit: 20
          value: "000000000001"
        - field: zeros
          type: cop
          startbit: 19
          stopbit: 7
          value: "0000000000000"
      definition: "console.log('Not implemented: ebreak');\n capi_raise('ebreak not implemented');"
  M:
    #   ____ __     __ _____ ____   __  __
    #  |  _ \\ \   / /|___ /|___ \ |  \/  |
    #  | |_) |\ \ / /   |_ \  __) || |\/| |
    #  |  _ <  \ V /   ___) |/ __/ | |  | |
    #  |_| \_\  \_/   |____/|_____||_|  |_|
    #        RV32M Standard Extension

    # R-type instructions
    - name: div
      type: R
      fields:
        - field: opcode
          value: "0110011"
        - field: funct7
          value: "0000001"
        - field: funct3
          value: "100"
      definition: "if (rs2 != 0)\n { rd = BigInt.asIntN(32, (BigInt.asIntN(32, BigInt(rs1)) / BigInt.asIntN(32, BigInt(rs2)))); }\n else { capi_raise('Division by zero not allowed'); }"

    - name: divu
      type: R
      fields:
        - field: opcode
          value: "0110011"
        - field: funct7
          value: "0000001"
        - field: funct3
          value: "101"
      definition: "if (rs2 != 0)\n { rd = BigInt.asIntN(32, (BigInt.asUintN(32, BigInt(rs1)) / BigInt.asUintN(32, BigInt(rs2)))); }\n else { capi_raise('Division by zero not allowed'); }"

    - name: mul
      type: R
      fields:
        - field: opcode
          value: "0110011"
        - field: funct7
          value: "0000001"
        - field: funct3
          value: "000"
      definition: "rd = capi_uint2int(rs1) * capi_uint2int(rs2);"

    - name: mulh
      type: R
      fields:
        - field: opcode
          value: "0110011"
        - field: funct7
          value: "0000001"
        - field: funct3
          value: "001"
      definition: "rd = BigInt.asIntN(32, (BigInt.asIntN(64, BigInt.asIntN(32, BigInt(rs1)) * BigInt.asIntN(32, BigInt(rs2))) >> 32n));"

    - name: mulhsu
      type: R
      fields:
        - field: opcode
          value: "0110011"
        - field: funct7
          value: "0000001"
        - field: funct3
          value: "010"
      definition: "rd = BigInt.asIntN(32, (BigInt.asIntN(64, BigInt.asIntN(32, BigInt(rs1)) * BigInt.asUintN(32, BigInt(rs2))) >> 32n))"

    - name: mulhu
      type: R
      fields:
        - field: opcode
          value: "0110011"
        - field: funct7
          value: "0000001"
        - field: funct3
          value: "011"
      definition: "rd = BigInt.asIntN(32, (BigInt.asUintN(64, BigInt.asUintN(32, BigInt(rs1)) * BigInt.asUintN(32, BigInt(rs2))) >> 32n));"

    - name: rem
      type: R
      fields:
        - field: opcode
          value: "0110011"
        - field: funct7
          value: "0000001"
        - field: funct3
          value: "110"
      definition: "rd = rs1 % rs2;"

    - name: remu
      type: R
      fields:
        - field: opcode
          value: "0110011"
        - field: funct7
          value: "0000001"
        - field: funct3
          value: "111"
      definition: "rd = rs1 % rs2;"
  F:
    #   ____ __     __ _____ ____   _____
    #  |  _ \\ \   / /|___ /|___ \ |  ___|
    #  | |_) |\ \ / /   |_ \  __) || |_
    #  |  _ <  \ V /   ___) |/ __/ |  _|
    #  |_| \_\  \_/   |____/|_____||_|
    #       RV32F Standard Extension
    # I-type instructions
    - name: flw
      type: I-Offset
      fields:
        - field: opcode
          value: "0000111"
        - field: funct3
          value: "010"
        - field: rd # We're overriding the rd field from the template
          type: SFP-Reg
      definition: "rd = capi_mem_read(rs1+imm, 'w', rd_name);\n rd = capi_uint2float32(rd);"

      # R-type instructions
    - name: fadd.s
      type: R-Floating
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0000000"
        - field: funct3
          type: inm-unsigned # We're overriding the funct3 field from the template
          custom: rounding-mode
          optional: true
          order: 4
      definition: "rd = rs2 + rs1;"

    - name: fclass.s
      type: R-Floating
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "1110000"
        - field: funct3
          value: "001"
        - field: rs2
          type: cop
          value: "00000"
          order: null
        - field: rd
          type: INT-Reg
      definition: "let a = capi_float2bin(rs1);\nrd=capi_check_ieee(parseInt(a[0]), parseInt(a.slice(1,9), 2), parseInt(a.slice(10), 2));"

    - name: fcvt.s.w
      # There's quite a bit of overriding here, but RISC-V
      # has a lot of different conversion instructions, so
      # we need to be flexible
      type: R-IntToFloat
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "1101000"
        - field: funct5
          value: "00000"
        - field: funct3 # In this instruction, there is no "funct3", instead we have a rounding mode field.
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 3
      definition: "rd = capi_uint2int(rs1)"

    - name: fcvt.s.wu
      type: R-IntToFloat
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "1101000"
        - field: funct5
          value: "00001"
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 3
      definition: "rd = capi_int2uint(rs1)"

    - name: fcvt.w.s
      type: R-FloatToInt
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "1100000"
        - field: funct5
          value: "00000"
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 3
      definition: "rd = parseInt(rs1);"

    - name: fcvt.wu.s
      type: R-FloatToInt
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "1100000"
        - field: funct5
          value: "00001"
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 3
      definition: "rd = capi_int2uint(parseInt(rs1));"

    - name: fdiv.s
      type: R-Floating
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0001100"
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 4
      definition: "if (rs2 != 0)\n { rd = rs1 / rs2; }\n else { capi_raise('Division by zero not allowed'); }"

    - name: feq.s
      type: R-Floating
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "1010000"
        - field: funct3
          value: "010"
        - field: rd
          type: INT-Reg
      definition: "rd = (rs1 === rs2) ? 1 : 0;"

    - name: fle.s
      type: R-Floating
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "1010000"
        - field: funct3
          value: "000"
        - field: rd
          type: INT-Reg
      definition: "rd = (rs1 <= rs2) ? 1 : 0;"

    - name: flt.s
      type: R-Floating
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "1010000"
        - field: funct3
          value: "001"
        - field: rd
          type: INT-Reg
      definition: "rd = (rs1 < rs2) ? 1 : 0;"

    - name: fmax.s
      type: R-Floating
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0010100"
        - field: funct3
          value: "001"
      definition: "rd = Math.max(rs1, rs2);"

    - name: fmin.s
      type: R-Floating
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0010100"
        - field: funct3
          value: "000"
      definition: "rd = Math.min(rs1, rs2);"

    - name: fmul.s
      type: R-Floating
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0001000"
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 4
      definition: "rd = rs2 * rs1;"

    - name: fmv.w.x
      type: R-IntToFloat
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "1111000"
        - field: funct5
          value: "00000"
        - field: funct3
          value: "000"
      definition: "rd = capi_uint2float32(rs1);"

    - name: fmv.x.w
      type: R-FloatToInt
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "1110000"
        - field: funct5
          value: "00000"
        - field: funct3
          value: "000"
      definition: "rd = capi_float322uint(rs1);"

    - name: fsgnj.s
      type: R-Floating
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0010000"
        - field: funct3
          value: "000"
      definition: "rd = (rs2 >= 0) ? Math.abs(rs1) : -Math.abs(rs1);"

    - name: fsgnjn.s
      type: R-Floating
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0010000"
        - field: funct3
          value: "001"
      definition: "rd = (rs2 <= 0) ? Math.abs(rs1) : -Math.abs(rs1);"

    - name: fsgnjx.s
      type: R-Floating
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0010000"
        - field: funct3
          value: "010"
      definition: "let a = rs1<0; let b = rs2<0;\nrd = (a^b) ? -Math.abs(rs1) : Math.abs(rs1);"

    - name: fsqrt.s
      type: R-Floating
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0101100"
        - field: rs2 # In this instruction, rs2 is more like a funct5
          type: cop
          value: "00000"
          order: null
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 3
      definition: "if (rs1 >= 0)\n { rd = Math.sqrt(rs1); }\n else { capi_raise('Square root of a negative number is not allowed.'); }"

    - name: fsub.s
      type: R-Floating
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0000100"
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 4
      definition: "rd = rs1 - rs2;"

    # R4-type instructions
    - name: fmadd.s
      type: R4
      fields:
        - field: opcode
          value: "1000011"
        - field: funct2
          value: "00"
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 5
      definition: "rd = rs1 * rs2 + rs3;"

    - name: fmsub.s
      type: R4
      fields:
        - field: opcode
          value: "1000111"
        - field: funct2
          value: "00"
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 5
      definition: "rd = rs1 * rs2 - rs3;"

    - name: fnmadd.s
      type: R4
      fields:
        - field: opcode
          value: "1001111"
        - field: funct2
          value: "00"
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 5
      definition: "rd = -rs1 * rs2 - rs3;"

    - name: fnmsub.s
      type: R4
      fields:
        - field: opcode
          value: "1001011"
        - field: funct2
          value: "00"
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 5
      definition: "rd = -rs1 * rs2 + rs3;"

    # S-type instructions
    - name: fsw
      type: S
      fields:
        - field: opcode
          value: "0100111"
        - field: funct3
          value: "010"
        - field: rs2
          type: SFP-Reg
      definition: "var val1 = capi_float322uint(rs2);\n capi_mem_write(rs1+imm, val1, 'w', rs2_name);"
  D:
    #   ____ __     __ _____ ____   ____
    #  |  _ \\ \   / /|___ /|___ \ |  _ \
    #  | |_) |\ \ / /   |_ \  __) || | | |
    #  |  _ <  \ V /   ___) |/ __/ | |_| |
    #  |_| \_\  \_/   |____/|_____||____/
    #       RV32D Standard Extension
    # I-type instructions
    - name: fld
      type: I-Offset
      fields:
        - field: opcode
          value: "0000111"
        - field: funct3
          value: "011"
        - field: rd # We're overriding the rd field from the template
          type: DFP-Reg
      definition: "var isnotalign = capi_bad_align(rs1+imm, 'd');\n if (isnotalign) { capi_raise('The memory must be align'); }\n var val1 = capi_mem_read(rs1+imm, 'w', rd_name);\n var val2 = capi_mem_read(rs1+imm+4n, 'w', rd_name);\n var buf = new ArrayBuffer(8);\n var arr = (new Uint32Array(buf));\n arr[1] = Number(val1);\n arr[0] = Number(val2);\n rd = (new Float64Array(buf))[0];"

      # R-type instructions
    - name: fadd.d
      type: R-Double
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0000001"
        - field: funct3
          type: inm-unsigned # We're overriding the funct3 field from the template
          custom: rounding-mode
          optional: true
          order: 4
      definition: "rd = rs2 + rs1;"

    - name: fclass.d
      type: R-Double
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "1110001"
        - field: funct3
          value: "001"
        - field: rs2
          type: cop
          value: "00000"
          order: null
        - field: rd
          type: INT-Reg
      definition: "let a = capi_float2bin(rs1);\nrd=capi_check_ieee(parseInt(a[0]), parseInt(a.slice(1,12), 2), parseInt(a.slice(13), 2));"

    - name: fcvt.d.s
      type: R-Conversion
      fields:
        - field: opcode
          value: "1010011"
        - field: rd
          type: DFP-Reg
        - field: rs1
          type: SFP-Reg
        - field: funct7
          value: "0100001"
        - field: funct5
          value: "00000"
        # NOTICE: This specific instruction has a rounding mode, but it's NOT USED.
        # A conversion from float to double doesn't need a rounding mode.
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: null
      definition: "rd = rs1;" # TODO: This doesn't seem right, check the RISC-V manual

    - name: fcvt.d.w
      type: R-Conversion
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "1101001"
        - field: funct5
          value: "00000"
        # NOTICE: This specific instruction has a rounding mode, but it's NOT USED.
        # A conversion from float to double doesn't need a rounding mode.
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: null
        - field: rd
          type: DFP-Reg
        - field: rs1
          type: INT-Reg
      definition: "rd = capi_uint2int(rs1);"

    - name: fcvt.d.wu
      type: R-Conversion
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "1101001"
        - field: funct5
          value: "00001"
        # NOTICE: This specific instruction has a rounding mode, but it's NOT USED.
        # A conversion from float to double doesn't need a rounding mode.
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: null
        - field: rd
          type: DFP-Reg
        - field: rs1
          type: INT-Reg
      definition: "rd = capi_int2uint(parseFloat(rs1));"

    - name: fcvt.s.d
      type: R-Conversion
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0100000"
        - field: funct5
          value: "00001"
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 3
        - field: rd
          type: SFP-Reg
        - field: rs1
          type: DFP-Reg
      definition: "rd = rs1;" # TODO: This doesn't seem right, check the RISC-V manual

    - name: fcvt.w.d
      type: R-Conversion
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "1100001"
        - field: funct5
          value: "00000"
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 3
        - field: rd
          type: INT-Reg
        - field: rs1
          type: DFP-Reg
      definition: "rd = parseInt(rs1);"

    - name: fcvt.wu.d
      type: R-Conversion
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "1100001"
        - field: funct5
          value: "00001"
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 3
        - field: rd
          type: INT-Reg
        - field: rs1
          type: DFP-Reg
      definition: "rd = capi_int2uint(parseInt(rs1));"

    - name: fdiv.d
      type: R-Double
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0001101"
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 4
      definition: "if (rs2 != 0)\n { rd = rs1 / rs2; }\n else { capi_raise('Division by zero not allowed'); }"

    - name: feq.d
      type: R-Double
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "1010001"
        - field: funct3
          value: "010"
        - field: rd
          type: INT-Reg
      definition: "rd = (rs1 == rs2) ? 1 : 0;"

    - name: fle.d
      type: R-Double
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "1010001"
        - field: funct3
          value: "000"
        - field: rd
          type: INT-Reg
      definition: "rd = (rs1 <= rs2) ? 1 : 0;"

    - name: flt.d
      type: R-Double
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "1010001"
        - field: funct3
          value: "001"
        - field: rd
          type: INT-Reg
      definition: "rd = (rs1 < rs2) ? 1 : 0;"

    - name: fmax.d
      type: R-Double
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0010101"
        - field: funct3
          value: "001"
      definition: "rd = Math.max(rs1, rs2);"

    - name: fmin.d
      type: R-Double
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0010101"
        - field: funct3
          value: "000"
      definition: "rd = Math.min(rs1, rs2);"

    - name: fmul.d
      type: R-Double
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0001001"
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 4
      definition: "rd = rs1 * rs2;"

    - name: fsgnj.d
      type: R-Double
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0010001"
        - field: funct3
          value: "000"
      definition: "rd = (rs2 > 0) ? Math.abs(rs1) : -Math.abs(rs1);"

    - name: fsgnjn.d
      type: R-Double
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0010001"
        - field: funct3
          value: "001"
      definition: "rd = (rs2 > 0) ? -Math.abs(rs1) : +Math.abs(rs1);"

    - name: fsgnjx.d
      type: R-Double
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0010001"
        - field: funct3
          value: "010"
      definition: "let a = rs1<0; let b = rs2<0;\nrd = (a^b) ? -Math.abs(rs1) : Math.abs(rs1);"

    - name: fsqrt.d
      type: R-Double
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0101101"
        - field: rs2 # In this instruction, rs2 is more like a funct5
          type: cop
          value: "00000"
          order: null
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 3
      definition: "if (rs1 >= 0)\n { rd = Math.sqrt(rs1); }\n else { capi_raise('Square root of a negative number is not allowed.'); }"

    - name: fsub.d
      type: R-Double
      fields:
        - field: opcode
          value: "1010011"
        - field: funct7
          value: "0000101"
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 4
      definition: "rd = rs1 - rs2;"

    # R4-type instructions
    - name: fmadd.d
      type: R4-Double
      fields:
        - field: opcode
          value: "1000011"
        - field: funct2
          value: "01"
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 5
      definition: "rd = rs1 * rs2 + rs3;"

    - name: fmsub.d
      type: R4-Double
      fields:
        - field: opcode
          value: "1000111"
        - field: funct2
          value: "01"
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 5
      definition: "rd = rs1 * rs2 - rs3;"

    - name: fnmadd.d
      type: R4-Double
      fields:
        - field: opcode
          value: "1001111"
        - field: funct2
          value: "01"
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 5
      definition: "rd = -rs1 * rs2 - rs3;"

    - name: fnmsub.d
      type: R4-Double
      fields:
        - field: opcode
          value: "1001011"
        - field: funct2
          value: "01"
        - field: funct3
          type: inm-unsigned
          custom: rounding-mode
          optional: true
          order: 5
      definition: "rd = -rs1 * rs2 + rs3;"

    # S-type instructions
    - name: fsd
      type: S
      fields:
        - field: opcode
          value: "0100111"
        - field: funct3
          value: "011"
        - field: rs2 # We're overriding the rs2 field from the template
          type: DFP-Reg
      definition: "var val = capi_split_double(rs2, 0);\n capi_mem_write(rs1+imm, val, 'w', rs2_name);\n val = capi_split_double(rs2, 1);\n capi_mem_write(rs1+imm+4n, val, 'w', rs2_name);"
  Zicsr:
    #   _____ _
    #  |__  /(_)  ___  ___  _ __
    #    / / | | / __|/ __|| '__|
    #   / /_ | || (__ \__ \| |
    #  /____||_| \___||___/|_|
    # RV32/64 Zicsr Standard Extension

    # TODO: Implement CSR instructions
  Zifencei:
    #   _____ _   __                          _
    #  |__  /(_) / _|  ___  _ __    ___  ___ (_)
    #    / / | || |_  / _ \| '_ \  / __|/ _ \| |
    #   / /_ | ||  _||  __/| | | || (__|  __/| |
    #  /____||_||_|   \___||_| |_| \___|\___||_|
    #     RV32/RV64 Zifencei Standard Exension

    - name: fence.i
      type: Custom
      fields:
        - field: opcode
          value: "0001111"
        - field: funct3
          type: cop
          startbit: 14
          stopbit: 12
          value: "001"
        - field: zeros
          type: cop
          startbit: 31
          stopbit: 15
          value: "00000000000000000"
        - field: zeros2
          type: cop
          startbit: 11
          stopbit: 7
          value: "00000"
      definition: "console.log('Not implemented: fence.i');\n capi_raise('fence.i not implemented');"

pseudoinstructions:
  # Make sure the definitions correspond with those in the RISC-V ASM manual (TODO: Check these!)

  # RV32I Pseudoinstructions
  I:
    - name: beqz
      fields:
        - field: rs1
          type: INT-Reg
        - field: off
          type: offset_bytes
      definition: "beq rs1, x0, off;"

    - name: bgez
      fields:
        - field: rs1
          type: INT-Reg
        - field: off
          type: offset_bytes
      definition: "bge reg1, x0, off;"

    - name: bgt
      fields:
        - field: rs1
          type: INT-Reg
        - field: rs2
          type: INT-Reg
        - field: off
          type: offset_bytes
      definition: "blt rs2, rs1, off;"

    - name: bgtu
      fields:
        - field: rs1
          type: INT-Reg
        - field: rs2
          type: INT-Reg
        - field: off
          type: offset_bytes
      definition: "bltu rs2, rs1, off;"

    - name: bgtz
      fields:
        - field: rs1
          type: INT-Reg
        - field: off
          type: offset_bytes
      definition: "bgt rs1, x0, off;"

    - name: ble
      fields:
        - field: rs1
          type: INT-Reg
        - field: rs2
          type: INT-Reg
        - field: off
          type: offset_bytes
      definition: "bge rs2, rs1, off;"

    - name: bleu
      fields:
        - field: rs1
          type: INT-Reg
        - field: rs2
          type: INT-Reg
        - field: off
          type: offset_bytes
      definition: "bgeu rs2, rs1, off;"

    - name: blez
      fields:
        - field: rs1
          type: INT-Reg
        - field: off
          type: offset_bytes
      definition: "ble x0, rs1, off;"

    - name: bltz
      fields:
        - field: rs1
          type: INT-Reg
        - field: off
          type: offset_bytes
      definition: "blt rs1, x0, off;"

    - name: bnez
      fields:
        - field: rs1
          type: INT-Reg
        - field: off
          type: offset_bytes
      definition: "bne rs1, x0, off;"

    - name: j
      fields:
        - field: off
          type: offset_bytes
      definition: "beq zero, zero, off;"

    - name: jalr
      fields:
        - field: rs
          type: INT-Reg
      definition: "jalr x1, 0(rs);"

    - name: jr
      fields:
        - field: rs
          type: INT-Reg
      definition: "jalr x0, 0(rs);"

    - name: la
      fields:
        - field: rd
          type: INT-Reg
        - field: addr
          type: inm-unsigned
      definition: "no_ret_op{tmp=Field.2.(31,0).int;\ntmp_pc_offset=(reg.pc-4)&0xFFF;\ntmp_low=tmp&0x00000FFF;\ntmp_hi=tmp>>12};\nauipc rd, op{tmp_hi};\naddi rd, rd, op{tmp_low-(tmp_pc_offset)};"

    - name: li
      fields:
        - field: rd
          type: INT-Reg
        - field: val
          type: inm-signed
      definition: "no_ret_op{tmp=Field.2.(31,0).int;\ntmp_low=tmp&0x00000FFF;\ntmp_low-=tmp_low>0x7FF? 0x1000 : 0;\ntmp_hi=(tmp - tmp_low)>>>12};\nif(tmp_hi === 0){addi rd, x0, op{tmp_low};}\nelse{lui rd, op{tmp_hi};\naddi rd, rd, op{tmp_low};}"

    - name: mv
      fields:
        - field: reg1
          type: INT-Reg
        - field: reg2
          type: INT-Reg
      definition: "addi reg1, reg2, 0;"

    - name: neg
      fields:
        - field: reg1
          type: INT-Reg
        - field: reg2
          type: INT-Reg
      definition: "sub reg1, x0, reg2;"

    - name: nop
      definition: "addi x0, x0, 0;"

    - name: not
      fields:
        - field: reg1
          type: INT-Reg
        - field: reg2
          type: INT-Reg
      definition: "xori reg1, reg2, -1;"

    - name: ret
      definition: "jalr x0, 0(x1);" #TODO: check this!

    - name: seqz
      fields:
        - field: reg1
          type: INT-Reg
        - field: reg2
          type: INT-Reg
      definition: "sltiu reg1, reg2, 1;"

    - name: sgtz
      fields:
        - field: reg1
          type: INT-Reg
        - field: reg2
          type: INT-Reg
      definition: "slt reg1, x0, reg2;"

    - name: sltz
      fields:
        - field: reg1
          type: INT-Reg
        - field: reg2
          type: INT-Reg
      definition: "slt reg1, reg2, x0;"

    - name: snez
      fields:
        - field: reg1
          type: INT-Reg
        - field: reg2
          type: INT-Reg
      definition: "sltu reg1, x0, reg2;"
  F:
    # RV32F Pseudoinstructions
    - name: fabs.s
      fields:
        - field: rs1
          type: SFP-Reg
        - field: rs2
          type: SFP-Reg
      definition: "fsgnjx.s rs1, rs2, rs2;"

    - name: fmv.s
      fields:
        - field: rs1
          type: SFP-Reg
        - field: rs2
          type: SFP-Reg
      definition: "fsgnj.s rs1, rs2, rs2;"

    - name: fneg.s
      fields:
        - field: rs1
          type: SFP-Reg
        - field: rs2
          type: SFP-Reg
      definition: "fsgnjn.s rs1, rs2, rs2;"
  D:
    # RV32D Pseudoinstructions
    - name: fabs.d
      fields:
        - field: rs1
          type: DFP-Reg
        - field: rs2
          type: DFP-Reg
      definition: "fsgnjx.d rs1, rs2, rs2;"

    - name: fmv.d
      fields:
        - field: rs1
          type: DFP-Reg
        - field: rs2
          type: DFP-Reg
      definition: "fsgnj.d rs1, rs2, rs2;"

    - name: fneg.d
      fields:
        - field: rs1
          type: DFP-Reg
        - field: rs2
          type: DFP-Reg
      definition: "fsgnjn.d rs1, rs2, rs2;"
